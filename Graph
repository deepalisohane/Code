//shortest distance of all the vertices from the source vertex S.
    // adj size denotes vertices.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
        vector<int> dist(V, 1e9);
        dist[S] = 0;
        pq.push({0, S});
        while(!pq.empty()) {
            auto it = pq.top();
            pq.pop();
            int node = it.second;
            int wt = it.first;
            for(auto vec : adj[node]) {
                if(dist[vec[0]] > dist[node] + vec[1]) {
                    dist[vec[0]] = dist[node] + vec[1];
                    pq.push({dist[node] + vec[1], vec[0]});
                }
            }
        }
        return dist;
    }


//Distance from the Source (Bellman-Ford Algorithm) ->
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for(int i = 1; i <= V-1; i++) {
            for(auto &it : edges) {
                int u = it[0], v = it[1], wt = it[2];
                dist[v] = min(dist[v], dist[u] + wt);
            }
        }
        
        for(auto &it : edges) {  // check for cycle
            int u = it[0], v = it[1], wt = it[2];
            if(wt + dist[u] < dist[v]) return {-1};
        }
        
        return dist;
    }
    
// Floyd Warshall ->
  void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n = matrix.size();
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == -1)matrix[i][j] = 1e8;
	        }
	    }
	    
	    for(int via = 0; via < n; via++) {
	        
	        for(int i = 0; i < n; i++) {
	            for(int j = 0; j < n; j++) {
	                matrix[i][j] = min(matrix[i][j], matrix[i][via] + matrix[via][j]);
	            }
	        }
	        
	    }
	    
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == 1e8)matrix[i][j] = -1;
	        }
	    }
	}
  
  
  
