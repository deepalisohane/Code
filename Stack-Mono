
    vector<int>nextGreater(vector<int> &height, int n) {
        vector<int>nge(n, -1);
        stack<int>st;
        for(int i = 0; i < n; i++) {
            while(st.size() && height[i] > height[st.top()]) {
                nge[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }
        return nge;
    }
    
    vector<int>previousGreater(vector<int> &height, int n) {
        vector<int>pge(n, -1);
        stack<int>st;
        for(int i = 0; i < n; i++) {
            while(st.size() && height[i] >= height[st.top()]) {
                st.pop();
            }
            if(st.size())pge[i] = st.top();
            st.push(i);
        }
        return pge;
    }
    
    vector<int>nextSmaller(vector<int>& heights, int n) {
        vector<int>nse(n, -1);
        stack<int>st;
        for(int i = 0; i < n; i++) {
            int cur = heights[i];
            while(st.size() && heights[st.top()] > cur){
              nse[st.top()] = i;
              st.pop();
            }
            st.push(i);
        }
        return nse;
    }
    
    vector<int>previousSmaller(vector<int>& heights, int n) {
        vector<int>pse(n, -1);
        stack<int>st;
        for(int i = 0; i < n; i++) {
            int cur = heights[i];
            while(st.size() && heights[st.top()] >= cur)st.pop();
            if(st.size())pse[i] = st.top();
            st.push(i);
        }
        return pse;
    }
    
