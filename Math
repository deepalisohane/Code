// gcd
int gcd(int a,int b) { if (a == 0) return b; return gcd(b%a, a);}

//lcm
int lcm(int a, int b){return (a / gcd(a, b)) * b;}

// ceil value
int ceilVal(int a,int b){return (a/b)+((a%b)!=0);}

// digit square sum
  int digitSqSum(int n){
      int sum = 0;
      while(n > 0){
          sum = sum + ((n%10)*(n%10));
          n=n/10;
      }
      return sum;
  }
  
// Sieve
    bool prime[500001];
    void SieveOfEratosthenes(){
      memset(prime, true, sizeof(prime));
      int n = 500000;
      for (int p = 2; p * p <= n; p++) {
          if (prime[p] == true) {
              for (int i = p * p; i <= n; i += p)
                  prime[i] = false;
          }
      }
    }
    
//modular exponentiation    will find x^y under mod p
    int power(long long x, unsigned int y, int p){
        int res = 1; 
        x = x % p; 
        if (x == 0) return 0; 
        while (y > 0){
             if (y & 1)
                res = (res*x) % p;
            y = y>>1;
            x = (x*x) % p;
        }
        return res;
    }
// length of two intervals
  int a, b, c, d;
	cin >> a >> b >> c >> d; // coordinates of two intervals
  int total = (b - a) + (d - c);  // the sum of the two intervals
	int intersection = max(min(b, d) - max(a, c), 0);  // check if there is common interval
	int ans = total - intersection;
  
// Given 2 rectangles and a obstacle truck. Find the visibility region;
    struct Rect {
      int x1, y1, x2, y2;
      int area() { return (y2 - y1) * (x2 - x1); }
    };

    int intersect(Rect p, Rect q) {
      int xOverlap = max(0, min(p.x2, q.x2) - max(p.x1, q.x1));
      int yOverlap = max(0, min(p.y2, q.y2) - max(p.y1, q.y1));
      return xOverlap * yOverlap;
    }

    int main() {
      Rect a, b, t;  // billboards a, b, and the truck
      cin >> a.x1 >> a.y1 >> a.x2 >> a.y2;
      cin >> b.x1 >> b.y1 >> b.x2 >> b.y2;
      cin >> t.x1 >> t.y1 >> t.x2 >> t.y2;
      cout << a.area() + b.area() - intersect(a, t) - intersect(b, t) << endl;
    }
