//Two numbers with odd occurrences
//Given an unsorted array, Arr[] of size N and that contains even number of occurrences for all numbers except two numbers. Find the two numbers in decreasing order which has odd occurrences.
        long long int x = 0;
        for(int i = 0; i < n; i++) x ^= arr[i];
        long long int set = x & ~(x-1);
        long long int one = 0;
        for(int i = 0; i < n; i++)
            if(set & arr[i]) one ^= arr[i];
        long long int sec = x ^ one;
        if(one < sec) return {sec, one};
        return {one, sec};
        
//Bitwise AND of Numbers Range
//Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.
     int rangeBitwiseAnd(int left, int right) {
        if(!left || !right) return 0;
        if(left == right) return left;
        int a = log2(left);
        int b = log2(right);
        if(a != b) return 0;
    }

