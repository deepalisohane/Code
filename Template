#include <bits/stdc++.h>
using namespace std;

#define int long long
#define for0(i, n) for (int i = 0; i < n; i++)
#define loop(i,a,b) for (int i = a; i < b; i++)
#define rloop(i,a,b) for(int i=a; i>=b; i--)
#define all(a) a.begin(),a.end()
int md=1000000000+7;
#define mpp map<int,int>
#define endl "\n"
#define pb emplace_back
#define vi vector<int>
#define pi pair<int, int>
#define vii vector<pi>
#define ff first
#define ss second
#define input(i,n,a) for(int i=0;i<n;i++)cin>>a[i];
#define output(i,n,a) for(int i=0;i<n;i++)cout<<a[i]<<" ";
#define sorti(v) sort(v.begin(), v.end())
#define sorta(a,n) sort(a,a+n)
#define fio ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
int gcd(int a,int b) { if (a == 0) return b; return gcd(b%a, a);}
int ceilVal(int a,int b){return (a/b)+((a%b)!=0);}



void solve(){
    int n;cin>>n;
    
    
}

signed main(){
    fio;
	int TT;cin>>TT;
	while(TT--)solve();
	return 0;
}

//https://usaco.guide/gold/modular?lang=cpp
//template to perform opertraion with modulo automaticly

const int MOD = 1e9 + 7;

struct mi {
 	int v; explicit operator int() const { return v; }
	mi() { v = 0; }
	mi(long long _v) : v(_v % MOD) { v += (v < 0) * MOD; }
};
mi& operator+=(mi& a, mi b) {
	if ((a.v += b.v) >= MOD) a.v -= MOD;
	return a;
}
mi& operator-=(mi& a, mi b) {
	if ((a.v -= b.v) < 0) a.v += MOD;
	return a;
}
mi operator+(mi a, mi b) { return a += b; }
mi operator-(mi a, mi b) { return a -= b; }
mi operator*(mi a, mi b) { return mi((long long) a.v * b.v); }
mi& operator*=(mi& a, mi b) { return a = a * b; }
mi pow(mi a, long long p) {
	assert(p >= 0);
	return p == 0 ? 1 : pow(a * a, p / 2) * (p & 1 ? a : 1);
}
mi inv(mi a) { assert(a.v != 0); return pow(a, MOD - 2); }
mi operator/(mi a, mi b) { return a * inv(b); }

int main() {
	{
		int a = 1e8, b = 1e8, c = 1e8;
		cout << (long long) a * b % MOD * c % MOD << "\n";  // 49000000
	}
	{
		mi a = 1e8, b = 1e8, c = 1e8;
		// cout << a * b * c << "\n";  // errors out- we have to convert it to an int
		cout << (int) (a * b * c) << "\n";  // 49000000
	}
}
